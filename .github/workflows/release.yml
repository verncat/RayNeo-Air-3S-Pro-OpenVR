name: Build & Release RayNeo SDK

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write   # needed to create releases

jobs:
  assemble_driver:
    name: Assemble OpenVR Driver Zip
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Build combined driver zip
        run: |
          TAG=${GITHUB_REF_NAME}
          mkdir -p steamvr_zip/rayneo/bin/win64 steamvr_zip/rayneo/bin/linux64
          if [ -f openvr_driver/driver.vrdrivermanifest ]; then
            cp openvr_driver/driver.vrdrivermanifest steamvr_zip/rayneo/
          else
            echo "Manifest missing"; ls -l openvr_driver || true
          fi
          WIN_DLL=$(find dist -type f -path "*openvr-driver-windows-latest*driver_rayneo.dll" -print -quit || true)
          if [ -n "$WIN_DLL" ]; then
            cp "$WIN_DLL" steamvr_zip/rayneo/bin/win64/driver_rayneo.dll || echo "Copy win64 failed"
          else
            echo "Windows driver dll not found; listing dist:"; ls -R dist/openvr-driver-windows-latest || true
          fi
          if [ -d dist/openvr-driver-ubuntu-latest/rayneo/bin/linux64 ]; then
            cp dist/openvr-driver-ubuntu-latest/rayneo/bin/linux64/driver_rayneo.so steamvr_zip/rayneo/bin/linux64/ || echo "Linux64 driver missing"
          fi
          (cd steamvr_zip && zip -r steamvr_rayneo_driver-${TAG}.zip rayneo)
          mkdir -p dist/steamvr_driver
          cp steamvr_zip/steamvr_rayneo_driver-${TAG}.zip dist/steamvr_driver/
        shell: bash
      - name: Upload combined driver zip
        uses: actions/upload-artifact@v4
        with:
          name: steamvr_rayneo_driver
          path: dist/steamvr_driver/steamvr_rayneo_driver-${{ github.ref_name }}.zip
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [RelWithDebInfo]
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup vcpkg (Windows only)
        if: startsWith(matrix.os, 'windows')
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
        # Using setup-node to ensure Git is modern; vcpkg bootstrap uses Git.
      - name: Bootstrap vcpkg (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          $env:VCPKG_ROOT = "$PWD\vcpkg"
          git clone https://github.com/microsoft/vcpkg.git "$env:VCPKG_ROOT"
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          echo "VCPKG_ROOT=$env:VCPKG_ROOT" >> $env:GITHUB_ENV
          echo "VCPKG_INSTALLED_DIR=$env:VCPKG_ROOT\installed" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Install dependencies (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          & "$env:VCPKG_ROOT\vcpkg.exe" install libusb[core]:x64-windows sdl2:x64-windows sdl2-ttf:x64-windows
        shell: pwsh

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libusb-1.0-0-dev libsdl2-dev libsdl2-ttf-dev libgl1-mesa-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install libusb sdl2 sdl2_ttf

      - name: Configure CMake (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          cmake -B build -DRAYNEO_BUILD_EXAMPLES=ON -DRAYNEO_BUILD_OPENVR_DRIVER=ON -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
        shell: pwsh

      - name: Configure CMake (POSIX)
        if: matrix.os != 'windows-latest'
        run: |
          cmake -B build -DRAYNEO_BUILD_EXAMPLES=ON -DRAYNEO_BUILD_OPENVR_DRIVER=ON
        shell: bash

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          cmake --build build --config ${{ matrix.build_type }} --target RayNeoSDK
          cmake --build build --config ${{ matrix.build_type }} --target RayNeoExample || true
          cmake --build build --config ${{ matrix.build_type }} --target RayNeoOrientationDemo || true
          cmake --build build --config ${{ matrix.build_type }} --target openvr_stub_driver || true
        shell: pwsh

      - name: Build (POSIX)
        if: matrix.os != 'windows-latest'
        run: |
          cmake --build build --target RayNeoSDK --config ${{ matrix.build_type }}
          cmake --build build --target RayNeoExample --config ${{ matrix.build_type }} || true
          cmake --build build --target RayNeoOrientationDemo --config ${{ matrix.build_type }} || true
          cmake --build build --target openvr_stub_driver --config ${{ matrix.build_type }} || true
        shell: bash

      - name: Package artifacts
        run: |
          mkdir -p package/include package/bin package/examples
          if [ -d include ]; then
            cp -R include/. package/include/
          else
            echo "WARNING: include directory missing"
          fi
          # Copy library (handle multi vs single config)
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp build/${{ matrix.build_type }}/RayNeoSDK.dll package/bin/ || echo "Missing RayNeoSDK.dll"
            cp build/${{ matrix.build_type }}/RayNeoSDK.lib package/bin/ || echo "Missing RayNeoSDK.lib"
            # OpenVR driver binary (Windows) - search recursively (handles config subdir patterns)
            WIN_DRIVER=$(find build/openvr_driver -type f -name driver_rayneo.dll -print -quit 2>/dev/null || true)
            if [ -n "$WIN_DRIVER" ]; then
              mkdir -p openvr_driver_artifacts/rayneo/bin/win64
              cp "$WIN_DRIVER" openvr_driver_artifacts/rayneo/bin/win64/driver_rayneo.dll
              echo "Found Windows driver at $WIN_DRIVER"
            else
              echo "OpenVR Windows driver not found; tree of build/openvr_driver:";
              ls -R build/openvr_driver || true
            fi
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp build/libRayNeoSDK.dylib package/bin/ || echo "Missing libRayNeoSDK.dylib"
          else
            cp build/libRayNeoSDK.so package/bin/ || echo "Missing libRayNeoSDK.so"
            # OpenVR driver binary (Linux)
            DRIVER_SO=$(find build/openvr_driver -name driver_rayneo.so -print -quit || true)
            if [ -n "$DRIVER_SO" ]; then
              mkdir -p openvr_driver_artifacts/rayneo/bin/linux64
              cp "$DRIVER_SO" openvr_driver_artifacts/rayneo/bin/linux64/driver_rayneo.so
              echo "Found Linux driver at $DRIVER_SO"
            else
              echo "OpenVR Linux driver not found; listing build/openvr_driver:";
              ls -R build/openvr_driver || true
            fi
          fi
          # Copy examples (Windows uses config dirs; others direct)
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp build/examples/simple/${{ matrix.build_type }}/* package/examples/ 2>/dev/null || true
            cp build/examples/orientation_demo/${{ matrix.build_type }}/* package/examples/ 2>/dev/null || true
          else
            cp build/examples/simple/* package/examples/ 2>/dev/null || true
            cp build/examples/orientation_demo/* package/examples/ 2>/dev/null || true
          fi
          tar -czf rayneo-sdk-${{ matrix.os }}.tar.gz package
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rayneo-sdk-${{ matrix.os }}
          path: rayneo-sdk-${{ matrix.os }}.tar.gz
      - name: Upload OpenVR driver raw artifacts
        if: (matrix.os == 'windows-latest') || (matrix.os == 'ubuntu-latest')
        uses: actions/upload-artifact@v4
        with:
          name: openvr-driver-${{ matrix.os }}
          path: openvr_driver_artifacts/**

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build, assemble_driver]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Generate Release Notes
        id: notes
        run: |
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "RayNeo SDK release for tag $GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          echo "Includes prebuilt binaries for Windows, macOS, and Linux." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Skip assembly (already done)
        run: echo "Driver zip assembled in assemble_driver job"
        shell: bash
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: RayNeo SDK ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.release_body }}
          files: |
            dist/*/*.tar.gz
            dist/steamvr_driver/steamvr_rayneo_driver-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
